/* 
    openHAB-alarm-V2 - configuration template files for an alarm system built on openHAB
    Copyright (C) 2021 Benrico Krog

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License version 3 
    as published by the Free Software Foundation

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/agpl-3.0.html.
*/

// Imports


//Variables (Sonoff Rf-bridge rf tags/id)
val key1_A = "EF1BC2"
val key1_B = "EF1BC8"
val key1_C = "EF1BC1"
val key1_D = "EF1BC4"

val key2_A = "1E77D2"
val key2_B = "1E77D8"
val key2_C = "1E77D1"
val key2_D = "1E77D4"

/*
val key2_A = ""
val key2_B = ""
val key2_C = ""
val key2_D = ""

val key2_A = ""
val key2_B = ""
val key2_C = ""
val key2_D = ""
*/

val pir1 = "FB123E"
val pir2 = "FB67CE"
val pir3 = "FA873E"
val pir4 = "FB53AE"

/*
val pir5 = ""
val pir6 = ""
val pir7 = ""
val pir8 = ""
*/

val beam1_label = "Front Beam"
val beam2_label = "Right Side P2P Beam"
val beam3_label = "Back P2P Beam"
val beam4_label = "Back Car Port Beam"
val beam5_label = "Front Car Port Beam"

rule "Rf Received"
when
    Item sonoff_RF_1_Device received update
then
    Thread::sleep(50) 
    if (sonoff_RF_1_Device.state == key1_A) 
    {
        if (virtual_security_zone_Tenant.state == ON) 
        { 
            virtual_security_zone_Tenant.state = OFF
        }
        else if (virtual_security_zone_Tenant.state == OFF || virtual_security_zone_Tenant.state == NULL)
        { 
            virtual_security_zone_Tenant.state = ON 
        }
    }

    if (sonoff_RF_1_Device.state == key2_A) 
    {
        if (virtual_security_zone_Beams.state == ON) 
        { 
            virtual_security_zone_Beams.state = OFF
        }
        else if (virtual_security_zone_Beams.state == OFF || virtual_security_zone_Beams.state == NULL)
        { 
            virtual_security_zone_Beams.state = ON 
        }
        if (virtual_security_zone_FrontDoor.state == ON) 
        { 
            virtual_security_zone_FrontDoor.state = OFF
        }
        else if (virtual_security_zone_FrontDoor.state == OFF || virtual_security_zone_FrontDoor.state == NULL)
        { 
            virtual_security_zone_FrontDoor.state = ON 
        }
    }

    /* Future code
    if (sonoff_RF_1_Device.state == key2_A) 
    {
        if (virtual_security_zone_House.state == ON) 
        { 
            virtual_security_zone_House.state = OFF
        }
        else if (virtual_security_zone_House.state == OFF || virtual_security_zone_House.state == NULL)
        { 
            virtual_security_zone_House.state = ON 
        }
    }
    */

    //Motor hek
    if (sonoff_RF_1_Device.state == key1_B || sonoff_RF_1_Device.state == key2_B) 
    {
        if (sonoff_4CH_PRO_1_Hek.state == ON) 
        { 
            sonoff_4CH_PRO_1_Hek.sendCommand(OFF)
        }
        else if (sonoff_4CH_PRO_1_Hek.state == OFF || sonoff_4CH_PRO_1_Hek.state == NULL)
        { 
            sonoff_4CH_PRO_1_Hek.sendCommand(ON)  
        }
    }

    // Garage deur
    if (sonoff_RF_1_Device.state == key1_C || sonoff_RF_1_Device.state == key2_C) 
    {
        if (sonoff_4CH_PRO_1_Garage.state == ON) 
        { 
            sonoff_4CH_PRO_1_Garage.sendCommand(OFF)
        }
        else if (sonoff_4CH_PRO_1_Garage.state == OFF || sonoff_4CH_PRO_1_Garage.state == NULL)
        { 
            sonoff_4CH_PRO_1_Garage.sendCommand(ON) 
        }
    }

    // Panic (key D on all remotes)
    if (sonoff_RF_1_Device.state == key1_D || sonoff_RF_1_Device.state == key2_D) 
    {
        if (virtual_security_siren.state == ON || virtual_security_siren.state == NULL) 
        { 
            virtual_security_siren.sendCommand(OFF) 
        }
        else 
        { 
            virtual_security_siren.sendCommand(ON) 
        }
    }

    /*****************************************
                    Alarm Logic
    *****************************************/
    if (virtual_security_zone_Tenant.state == ON)
    {
        if (sonoff_RF_1_Device.state == pir1 || sonoff_RF_1_Device.state == pir2 || sonoff_RF_1_Device.state == pir3 || sonoff_RF_1_Device.state == pir4)
        {
            virtual_security_siren.sendCommand(ON)    
            sendBroadcastNotification("Woonstel PIR Sensors was triggered")  
        }
    }

    if (virtual_security_zone_Tenant_Sleep.state == ON)
    {
        if (sonoff_RF_1_Device.state == pir3 || sonoff_RF_1_Device.state == pir4)
        {
            virtual_security_siren.sendCommand(ON)
            sendBroadcastNotification("Woonstel PIR Sensors was triggered")
        }
    }

    /* Future pir code
    if (virtual_security_zone_House.state == ON)
    {
        if (sonoff_RF_1_Device.state == pir5 || sonoff_RF_1_Device.state == pir6 || sonoff_RF_1_Device.state == pir7 || sonoff_RF_1_Device.state == pir8)
        {
            virtual_security_siren.sendCommand(ON)      
            sendBroadcastNotification("Tenant PIR Sensors was triggered") 
        }
    }
    */
end

rule "Beam Front Door triggered"
when
    Item esp_Beam_1 received update
then
    if (virtual_security_zone_FrontDoor.state == ON && esp_Beam_1.state == ON)
    {
        virtual_security_siren.sendCommand(ON)    
        //sendNotification("bfjkrog@pm.me", "Voordeur Beam")
        sendBroadcastNotification(beam1_label + " was triggered")
    }
end

rule "Beam 2 triggered"
when
    Item esp_Beam_2 received update
then
    if (virtual_security_zone_Beams.state == ON && esp_Beam_2.state == ON)
    {
        virtual_security_siren.sendCommand(ON)    
        sendBroadcastNotification(beam2_label + " was triggered")
    }
end

rule "Beam 3 triggered"
when
    Item esp_Beam_3 received update
then
    if (virtual_security_zone_Beams.state == ON && esp_Beam_3.state == ON)
    {
        virtual_security_siren.sendCommand(ON)  
        sendBroadcastNotification(beam3_label + " was triggered")  
    }
end

rule "Beam 4 triggered"
when
    Item esp_Beam_4 received update
then
    if (virtual_security_zone_Beams.state == ON && esp_Beam_4.state == ON)
    {
        virtual_security_siren.sendCommand(ON)    
        sendBroadcastNotification(beam4_label + " was triggered")
    }
end

rule "Beam 5 triggered"
when
    Item esp_Beam_5 received update
then
    if (virtual_security_zone_Beams.state == ON && esp_Beam_5.state == ON)
    {
        virtual_security_siren.sendCommand(ON)    
        sendBroadcastNotification(beam5_label + " was triggered")
    }
end

rule "Trigger Siren"
when
    Item virtual_security_siren received update
then
    if (virtual_security_siren.state == ON || virtual_security_siren.state == NULL) 
    { 
        sonoff_4CH_PRO_1_Siren.sendCommand(ON) 
        sendBroadcastNotification("Alarm triggered")
    }
    else 
    { 
        sonoff_4CH_PRO_1_Siren.sendCommand(OFF) 
    }
end
